#!/usr/bin/env python
# glbdump - Dump the contents of a Binary glTF (.glb) file
#
# Copyright 2021, Paul E.C. Melis
# 
# Permission is hereby granted, free of charge, to any person obtaining a 
# copy of this software and associated documentation files (the "Software"), 
# to deal in the Software without restriction, including without limitation 
# the rights to use, copy, modify, merge, publish, distribute, sublicense, 
# and/or sell copies of the Software, and to permit persons to whom the 
# Software is furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included 
# in all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL 
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, 
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN 
# THE SOFTWARE.

import sys, array, json, os
from struct import unpack

if len(sys.argv) == 1 or '-h' in sys.argv:
    print('Usage: %s [options] file.glb' % sys.argv[0])
    print()
    print('Options:')
    print('  -i  Dump images to files')
    print('  -l  Load images and show their properties')  
    print('  -a  Dump accessor values')
    print()
    sys.exit(-1)

glbfile = sys.argv[-1]
if not os.path.isfile(glbfile):
    print('Error: %s does not appear to be a file!' % glbfile)
    sys.exit(-1)
        
options = sys.argv[1:-1]

dump_images = False
dump_accessor_values = False
read_binary_chunk = False
show_image_properties = False

if '-a' in options:
    dump_accessor_values = True
    read_binary_chunk = True
if '-i' in options:
    dump_images = True
    read_binary_chunk = True
if '-l' in options:
    show_image_properties = True
    read_binary_chunk = True
    
if show_image_properties:
    from io import BytesIO
    try:
        from PIL import Image
    except ImportError:
        print('The -I option needs the PIL(LOW) package, which could not be loaded!')
        sys.exit(-1)

stats = os.stat(glbfile)
f = open(glbfile, 'rb')

if f.read(4) != b'glTF':
    print("This doesn't appear to be a Binary glTF file!")
    sys.exit(-1)
    
container_version = unpack('<I', f.read(4))[0]
if container_version != 2:
    print("Don't know how to handle container version %d, only know 2" % container_version)
    sys.exit(-1)
    
length = unpack('<I', f.read(4))[0]
print('Total file size %s bytes' % format(length, ',d'))
if stats.st_size != length:
    print('Warning: file size in .glb does not match actual file size (%s)!' % \
        format(stats.st_size, ',d'))

# Process JSON chunk
chunk_length = unpack('<I', f.read(4))[0]
chunk_type = f.read(4)
if chunk_type != b'JSON':
    print('First chunk is not of type JSON!')
    sys.exit(-1)

print()
print('JSON chunk (%s bytes)' % format(chunk_length, ',d'))

js = f.read(chunk_length).decode('utf8')
j = json.loads(js)

if 'buffers' not in j:
    print('No buffers defined in file, exiting!')
    sys.exit(-1)
    
buffers = j['buffers']
bufferviews = j['bufferViews']
accessors = j['accessors']

# Load buffer data, if needed

buffer0data = None
accessor_uses = {}

if read_binary_chunk:
    
    # Load binary buffer chunk
    chunk_length = unpack('<I', f.read(4))[0]
    chunk_type = f.read(4)
    if chunk_type != b'BIN\x00':
        print('Second chunk is not of type BIN!')
        sys.exit(-1)
            
    print('BIN chunk (%s bytes)' % format(chunk_length, ',d'))
    
    assert len(buffers) == 1
    assert 'uri' not in buffers[0]
    
    # BIN chunk might be up to 3 bytes longer than buffer, to satisfy GLB padding
    bindatasize = min(buffers[0]['byteLength'], chunk_length)
    buffer0data = memoryview(f.read(bindatasize))

f.close()

# Dump!

print()
print('Asset version %s' % j['asset']['version'])
print('Asset generator "%s"' % j['asset']['generator'])
if j['asset']['version'] != '2.0':
    print('Warning: not sure if we understand version != 2.0, but continuing anyway')

print()
print('Elements:')
print('%4d nodes' % len(j['nodes']))
if 'cameras' in j:
    print('%4d cameras' % len(j['cameras']))
if 'images' in j:
    totalimsize = 0
    for i in j['images']:
        totalimsize += bufferviews[i['bufferView']]['byteLength']
    print('%4d images     (%s bytes)' % (len(j['images']), format(totalimsize, ',d')))
if 'materials' in j:
    print('%4d materials' % len(j['materials']))
if 'meshes' in j:    
    print('%4d meshes' % len(j['meshes']))
if 'textures' in j:
    print('%4d textures' % len(j['textures']))
print()

totalbufsize = 0
for b in buffers:
    totalbufsize += b['byteLength']
print('%4d buffers    (%s bytes)' % (len(buffers), format(totalbufsize, ',d')))

totalaccsize = 0
for a in accessors:
    bvidx = a['bufferView'] if 'bufferView' in a else 0
    totalaccsize += bufferviews[bvidx]['byteLength']
print('%4d accessors  (%s bytes)' % (len(accessors), format(totalaccsize, ',d')))

if 'cameras' in j:
    print()
    print('Cameras:')
    for idx, c in enumerate(j['cameras']):        
        name = '"'+c['name']+'"' if 'name' in c else '<unnamed>'
        print('[%4d] %-12s  %-25s' % (idx, c['type'], name))

if 'images' in j:
    print()
    print('Images:')
    for idx, i in enumerate(j['images']):
        bv = bufferviews[i['bufferView']]
        length = bv['byteLength']
        
        name = '"'+i['name']+'"' if 'name' in i else '<unnamed>'
        mimetype = i['mimeType']            
        
        if show_image_properties or dump_images:
            assert bv['buffer'] == 0
            offset = bv['byteOffset']
            imgfiledata = buffer0data[offset:offset+length]            
                
        imgprops = ''
        if show_image_properties:
            f = BytesIO(imgfiledata)
            try:
                img = Image.open(f)
                r = '%dx%d' % (img.size[0], img.size[1])
                imgprops = '%11s %s' % (r, img.mode)
            except IOError as e:
                imgprops = '(error: %s)' % e
                
        print('[%4d] %12s bytes  %-12s %-40s %s' % \
            (idx, format(length,',d'), i['mimeType'], name, imgprops))
        
        if dump_images:            
            try:
                ext = {
                    'image/jpeg':   'jpg',
                    'image/png' :   'png'
                }[mimetype]
            except:
                ext = '.bin'
                
            o = open('img-%04d.%s' % (idx, ext), 'wb')
            o.write(imgfiledata)
            o.close()
            
component_sizes = {
    5120: 1, 5121: 1, 5122: 2, 5123: 2, 5125: 4, 5126: 4
}
    
component_types = {
    5120: 'BYTE', 5121: 'UNSIGNED_BYTE', 5122: 'SHORT', 5123: 'UNSIGNED_SHORT', 
    5125: 'UNSIGNED_INT', 5126: 'FLOAT'
}

array_types = {
    5120: 'b', 5121: 'B', 5122: 'h', 5123: 'H', 
    5125: 'I', 5126: 'f'
}

component_elements = {
    'SCALAR': 1, 'VEC2': 2, 'VEC3': 3, 'VEC4': 4
}
    
def accessor_size(accidx):
    a = accessors[accidx]
    return a['count'] * component_sizes[a['componentType']] * component_elements[a['type']]

if 'meshes' in j:
    print()
    print('Meshes:')
    for meshidx, m in enumerate(j['meshes']):
        total_accessor_size = 0
        vertices = 0
        normals = 0
        tangents = 0
        color0 = 0
        texcoord0 = 0
        texcoord1 = 0
        indices = 0
        modes = set([])
        for primidx, p in enumerate(m['primitives']):
            attrs = p['attributes']
            
            accidx = attrs['POSITION']
            vertices += accessors[accidx]['count']
            accessor_uses[accidx] = (meshidx, primidx, 'P')
            total_accessor_size += accessor_size(accidx)
            
            if 'NORMAL' in attrs:
                accidx = attrs['NORMAL']
                normals += accessors[accidx]['count']
                accessor_uses[accidx] = (meshidx, primidx, 'N')
                total_accessor_size += accessor_size(accidx)
            if 'TANGENT' in attrs:
                accidx = attrs['TANGENT']
                tangents += accessors[accidx]['count']
                accessor_uses[accidx] = (meshidx, primidx, 'G')
                total_accessor_size += accessor_size(accidx)
            if 'COLOR_0' in attrs:
                accidx = attrs['COLOR_0']
                color0 += accessors[idx]['count']
                accessor_uses[accidx] = (meshidx, primidx, 'C0')
                total_accessor_size += accessor_size(accidx)
            if 'TEXCOORD_0' in attrs:
                accidx = attrs['TEXCOORD_0']
                texcoord0 += accessors[accidx]['count']
                accessor_uses[accidx] = (meshidx, primidx, 'T0')
                total_accessor_size += accessor_size(accidx)
            if 'TEXCOORD_1' in attrs:
                accidx = attrs['TEXCOORD_1']
                texcoord1 += accessors[accidx]['count']
                accessor_uses[accidx] = (meshidx, primidx, 'T1')
                total_accessor_size += accessor_size(accidx)
                
            accidx = p['indices']
            indices += accessors[accidx]['count']
            accessor_uses[accidx] = (meshidx, primidx, 'I')
            total_accessor_size += accessor_size(accidx)
            
            if 'mode' in p:
                modes.add(p['mode'])
            else:
                # Triangles by default
                modes.add(4)                                    
            
        # See primitive.mode in gltf spec
        modechars = ['P', 'L', 'LL', 'LS', 'T', 'TS', 'TF']
        modes = ','.join(map(lambda m: modechars[m], modes))
        
        s = '[%4d] %s' % (meshidx, '"'+m['name']+'"')
        print(s)
        
        d = '%8sV %8sI' % (format(vertices, ',d'), format(indices, ',d'))
        if color0 > 0:
            d += ' %8sC0' % format(color0, ',d')
        if normals > 0:
            d += ' %8sN' % format(normals, ',d')
        if texcoord0 > 0:
            d += ' %8sT0' % format(texcoord0, ',d')
        if texcoord1 > 0:
            d += ' %8sT1' % format(texcoord1, ',d')
            
        s = '       %12s bytes  %3dP %-3s  %s' % \
            (format(total_accessor_size, ',d'), len(m['primitives']), modes, d)            
        print(s)

if 'materials' in j:
    print()
    print('Materials:')
    for idx, m in enumerate(j['materials']):
        name = '"'+m['name']+'"' if 'name' in m else '<unnamed>'
        
        double_sided = '2S' if ('doubleSided' in m and m['doubleSided']) else ''
        
        textures = []
        if 'pbrMetallicRoughness' in m:
            #'metallic-roughness'
            mr = m['pbrMetallicRoughness']
            if 'baseColorTexture' in mr:
                textures.append('BC')
            if 'metallicRoughnessTexture' in mr:
                textures.append('MR')
            
        if 'normalTexture' in m:
            textures.append('N')
        if 'emissiveTexture' in m:
            textures.append('E')
        if 'occlusionTexture' in m:
            textures.append('O')
        
        alpha_mode = 'opaque'
        if 'alphaMode' in m:
            if m['alphaMode'] == 'MASK':
                alpha_mode = 'alpha-mask'
            elif m['alphaMode'] == 'BLEND':
                alpha_mode = 'alpha-blend'
            else:
                assert m['alphaMode'] == 'OPAQUE'  

        if len(textures) > 0:
            textures = '[%s]' % (' '.join(textures))
        else:
            textures = ''
        
        print('[%4d] %2s  %-11s  %-15s %s' % (idx, double_sided, alpha_mode, textures, name))

print()
print('Buffers:')
for idx, b in enumerate(buffers):
    print('[%4d] %11s bytes' % (idx, format(b['byteLength'], ',d')))
    
fmt_strings = {
    5120: '%3d', 5121: '%3d', 5122: '%5d', 5123: '%5d', 
    5125: '%10d', 5126: '%12.6f'
}

print()
print('Accessors:')
for idx, accessor in enumerate(accessors):
    bvidx = accessor['bufferView'] if 'bufferView' in accessor else 0
    bv = bufferviews[bvidx]
    bytelength = bv['byteLength']
    byteoffset = 0
    if 'byteOffset' in bv:
        byteoffset = bv['byteOffset']
    
    comptype = accessor['componentType']
    if comptype not in component_types:
        compdesc = '??? (%d)' % comptype
    else:
        compdesc = component_types[comptype]
        
    type = accessor['type']
    count = accessor['count']
    
    if idx in accessor_uses:
        meshidx, primidx, use = accessor_uses[idx]        
        print('[%4d] %8sx  %-6s  %-14s  %11s bytes  (M%d "%s", P%d, %s)' % \
            (idx, format(count, ',d'), type, compdesc, format(bytelength, ',d'), meshidx, j['meshes'][meshidx]['name'], primidx, use))
    else:
        print('[%4d] %8sx  %-6s  %-14s  %11s bytes  (unknown use)' % \
            (idx, format(count, ',d'), type, compdesc, format(bytelength, ',d')))
            
    if dump_accessor_values and (comptype in component_types):        
        
        a = array.array(array_types[comptype])
        a.frombytes(buffer0data[byteoffset:byteoffset+bytelength])
        
        nfmt = fmt_strings[comptype]
        if type == 'SCALAR':
            fmt = '  [%04d] ' + nfmt
            for idx in range(count):   
                print(fmt % (idx, a[idx]))
        elif type == 'VEC2':
            fmt = '  [%04d] ' + nfmt + ' ' + nfmt + ' '
            for idx in range(0, count):               
                print(fmt % (idx, a[2*idx], a[2*idx+1]))
        elif type == 'VEC3':
            fmt = '  [%04d] ' + nfmt + ' ' + nfmt + ' ' + nfmt + ' '
            for idx in range(0, count):               
                print(fmt % (idx, a[3*idx], a[3*idx+1], a[3*idx+2]))
        elif type == 'VEC4':
            fmt = '  [%04d] ' + nfmt + ' ' + nfmt + ' ' + nfmt + ' ' + nfmt + ' '
            for idx in range(0, count):               
                print(fmt % (idx, a[4*idx], a[4*idx+1], a[4*idx+2], a[4*idx+3]))
        else:
            raise ValueError('Unhandled accessor type "%s"' % type)
        
print()
